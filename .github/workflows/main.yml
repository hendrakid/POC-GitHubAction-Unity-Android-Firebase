name: Test project

on: [push, pull_request]

jobs:
  testAllModes:
    name: Test in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unityVersion: ['2020.3.0f1'] # some version must be included for package testing
        targetPlatform:
          - Android
        # projectPath:
        #   - test-project
        testMode:
          - playmode
          - editmode
    steps:
      - name: Free Disk Space for Android
        if: matrix.targetPlatform == 'Android'
        run: |
          df -h
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-
      - uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          # packageMode: true
          # unityVersion: ${{ matrix.unityVersion }}
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Coverage results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.coveragePath }}

  # buildWithLinux:
  #   needs: testAllModes  # Build-Android depends on testAllModes
  #   name: Build for ${{ matrix.targetPlatform }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       targetPlatform:
  #         - Android
  #   outputs:
  #     buildVersion: ${{ steps.buildStep.outputs.buildVersion }}
  #   steps:
  #     - name: Free Disk Space for Android
  #       if: matrix.targetPlatform == 'Android'
  #       run: |
  #         df -h
  #         sudo swapoff -a
  #         sudo rm -f /swapfile
  #         sudo rm -rf /usr/share/dotnet
  #         sudo rm -rf /opt/ghc
  #         sudo rm -rf "/usr/local/share/boost"
  #         sudo rm -rf "$AGENT_TOOLSDIRECTORY"
  #         df -h
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Create LFS file list
  #       run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
  #     - name: Restore LFS cache
  #       uses: actions/cache@v3
  #       id: lfs-cache
  #       with:
  #         path: .git/lfs
  #         key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
  #     - name: Git LFS Pull
  #       run: |
  #         git lfs pull
  #         git add .
  #         git reset --hard
  #     - uses: actions/cache@v3
  #       with:
  #         path: Library
  #         key: Library-build-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
  #         restore-keys: |
  #           Library-build-${{ matrix.targetPlatform }}-
  #           Library-build-
  #     - name: Build Unity Project
  #       id: buildStep
  #       uses: game-ci/unity-builder@v4
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #       with:
  #         targetPlatform: ${{ matrix.targetPlatform }}
  #         buildMethod: UnityBuilderAction.BuildScript.Build
  #         androidExportType: 'androidAppBundle'
  #         # androidAppBundle: true
  #         androidKeystoreName: whisper.keystore
  #         androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
  #         androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
  #         androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
  #         androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
  #         androidTargetSdkVersion: AndroidApiLevel34
  #     - name: Upload Build
  #       uses: actions/upload-artifact@v3
  #       if: github.event.action == 'published' || contains(github.event.inputs.workflow_mode, matrix.targetPlatform) || (contains(github.event.inputs.workflow_mode, 'Steam') && matrix.targetPlatform == 'StandaloneLinux64')
  #       with:
  #         name: cgs-${{ matrix.targetPlatform }}
  #         path: build/${{ matrix.targetPlatform }}
  #     - name: Zip Build
  #       uses: montudor/action-zip@v1
  #       if: github.event.action == 'published' && matrix.targetPlatform == 'StandaloneLinux64'
  #       with:
  #         args: zip -qq -r build/cgs-${{ matrix.targetPlatform }}.zip build/${{ matrix.targetPlatform }}
  #     - name: Upload Zip to GitHub Release
  #       uses: svenstaro/upload-release-action@v2
  #       if: github.event.action == 'published' && matrix.targetPlatform == 'StandaloneLinux64'
  #       with:
  #         repo_token: ${{ secrets.CGS_PAT }}
  #         asset_name: cgs-${{ matrix.targetPlatform }}.zip
  #         file: build/cgs-${{ matrix.targetPlatform }}.zip
  #         tag: ${{ github.ref }}
  #         overwrite: true
  #         body: ${{ github.event.release.body }}
